name: Deploy new3 with Apache + cloudflared (ephemeral)

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SITE_PORT: 9000

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y apache2 php unzip wget procps

      - name: Download new3.zip
        run: |
          echo "üì• Downloading new3.zip..."
          wget -q -O new3.zip "https://github.com/hrjfjtjtntnfn/lode/releases/download/V.838383/new3.zip"
          ls -lah new3.zip

      - name: Extract new3.zip
        run: |
          unzip -o new3.zip -d new3
          echo "Contents of new3:"
          ls -la new3 | sed -n '1,200p'

      - name: Write apache httpd.conf (custom)
        run: |
          WORKDIR="${GITHUB_WORKSPACE}/new3"
          echo "Writing /etc/apache2/httpd.conf with DocumentRoot $WORKDIR and Listen $SITE_PORT"
          sudo mkdir -p /var/log/apache2
          sudo bash -c "cat > /etc/apache2/httpd.conf" <<'EOF'
ServerRoot "/etc/apache2"
Listen 9000

# Minimal loads for php support (on Ubuntu php is mod_php package, but we include your module lines)
LoadModule mpm_prefork_module /usr/lib/apache2/modules/mod_mpm_prefork.so
# If using libphp on other systems, adjust LoadModule php_module path
#LoadModule php_module libexec/apache2/libphp.so
AddType application/x-httpd-php .php

LoadModule authn_core_module /usr/lib/apache2/modules/mod_authn_core.so
LoadModule authz_core_module /usr/lib/apache2/modules/mod_authz_core.so
LoadModule access_compat_module /usr/lib/apache2/modules/mod_access_compat.so
LoadModule mime_module /usr/lib/apache2/modules/mod_mime.so
LoadModule log_config_module /usr/lib/apache2/modules/mod_log_config.so
LoadModule env_module /usr/lib/apache2/modules/mod_env.so
LoadModule headers_module /usr/lib/apache2/modules/mod_headers.so
LoadModule setenvif_module /usr/lib/apache2/modules/mod_setenvif.so
LoadModule unixd_module /usr/lib/apache2/modules/mod_unixd.so
LoadModule status_module /usr/lib/apache2/modules/mod_status.so
LoadModule autoindex_module /usr/lib/apache2/modules/mod_autoindex.so
LoadModule dir_module /usr/lib/apache2/modules/mod_dir.so
LoadModule alias_module /usr/lib/apache2/modules/mod_alias.so
LoadModule rewrite_module /usr/lib/apache2/modules/mod_rewrite.so

ServerAdmin you@example.com
ServerName localhost:9000

<Directory />
    AllowOverride none
    Require all denied
</Directory>

DocumentRoot "${GITHUB_WORKSPACE}/new3"
<Directory "${GITHUB_WORKSPACE}/new3">
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
</Directory>

<IfModule dir_module>
    DirectoryIndex index.html index.php
</IfModule>

<Files ".ht*">
    Require all denied
</Files>

ErrorLog "/var/log/apache2/error_log"
LogLevel warn

CustomLog "/var/log/apache2/access_log" common

<IfModule alias_module>
    ScriptAlias /cgi-bin/ "/usr/lib/cgi-bin/"
</IfModule>

<Directory "${GITHUB_WORKSPACE}/new3">
    AllowOverride All
    <Files ".htaccess">
        # legacy-style directives included for compatibility
        Require all denied
    </Files>
</Directory>

<Directory "/usr/lib/cgi-bin">
    AllowOverride None
    Options None
    Require all granted
</Directory>

<IfModule headers_module>
    RequestHeader unset Proxy early
</IfModule>

<IfModule mime_module>
    TypesConfig /etc/mime.types
    AddType application/x-compress .Z
    AddType application/x-gzip .gz .tgz
</IfModule>
EOF

      - name: Ensure DocumentRoot ownership & permissions
        run: |
          sudo chown -R $(whoami):$(whoami) "${GITHUB_WORKSPACE}/new3"
          sudo chmod -R 755 "${GITHUB_WORKSPACE}/new3"

      - name: Start Apache with custom config
        run: |
          echo "üöÄ Starting Apache using /etc/apache2/httpd.conf on port $SITE_PORT"
          sudo apachectl -f /etc/apache2/httpd.conf -k start
          # show process and listen sockets
          ps aux | grep -E 'apache|httpd' || true
          ss -tulpn | grep ":${SITE_PORT}" || true
          # quick test
          curl -I "http://localhost:${SITE_PORT}" || true

      - name: Install cloudflared
        run: |
          echo "üì• Installing cloudflared..."
          sudo wget -q -O /usr/local/bin/cloudflared \
            https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
          sudo chmod +x /usr/local/bin/cloudflared
          /usr/local/bin/cloudflared --version

      - name: Start cloudflared tunnel (ephemeral) and show public URL
        run: |
          echo "üåê Starting cloudflared tunnel to http://localhost:${SITE_PORT} ..."
          nohup /usr/local/bin/cloudflared tunnel --url "http://localhost:${SITE_PORT}" --no-autoupdate > cloudflared.log 2>&1 &
          sleep 8
          if grep -Eo 'https?://[^ ]+trycloudflare.com' cloudflared.log | head -n1 > /tmp/public_url; then
            echo "‚úÖ Public URL:"
            cat /tmp/public_url
          else
            echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y URL. Log cloudflared:"
            sed -n '1,200p' cloudflared.log || true
            exit 1
          fi
          echo "üïí Gi·ªØ phi√™n ho·∫°t ƒë·ªông 6000s ƒë·ªÉ web online..."
          # gi·ªØ job s·ªëng ƒë·ªÉ tunnel c√≤n up ‚Äî job s·∫Ω t·ª± k·∫øt th√∫c sau sleep
          sleep 6000

      - name: Stop Apache (cleanup)
        if: always()
        run: |
          echo "üßπ Stopping Apache (cleanup)..."
          sudo apachectl -f /etc/apache2/httpd.conf -k stop || true
