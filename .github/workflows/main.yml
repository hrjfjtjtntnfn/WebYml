name: phpMyAdmin + NRO Setup with Cloudflared Tunnel (combined)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  setup:
    name: Setup MySQL, import DBs and start phpMyAdmin (ephemeral)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install required packages
        run: |
          sudo apt-get update -y
          sudo apt-get install -y mysql-server php php-mbstring php-zip php-gd php-json php-curl php-mysql unzip wget openssh-client

      - name: Stop MySQL service (if running)
        run: |
          sudo systemctl stop mysql || true

      - name: Start MySQL with skip-grant-tables
        run: |
          sudo mkdir -p /var/run/mysqld
          sudo chown mysql:mysql /var/run/mysqld
          sudo mysqld_safe --skip-grant-tables --skip-networking &
          sleep 8

      - name: Set root password
        run: |
          mysql -uroot <<'SQL'
          FLUSH PRIVILEGES;
          ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';
          FLUSH PRIVILEGES;
          SQL
          echo "‚úÖ Root password set to 'root'"

      - name: Restart MySQL normally
        run: |
          sudo pkill mysqld || true
          sudo systemctl start mysql
          sleep 5
          mysql -uroot -proot -e "SELECT VERSION();"
          echo "‚úÖ MySQL restarted and accessible."

      - name: Create databases and import SQL
        run: |
          mysql -uroot -proot -e "CREATE DATABASE IF NOT EXISTS nro_acc;"
          if [ -f ./nro_acc.sql ]; then mysql -uroot -proot nro_acc < ./nro_acc.sql; else echo "‚ö†Ô∏è ./nro_acc.sql not found, skipping import"; fi
          mysql -uroot -proot -e "CREATE DATABASE IF NOT EXISTS nro_data;"
          if [ -f ./nro_data.sql ]; then mysql -uroot -proot nro_data < ./nro_data.sql; else echo "‚ö†Ô∏è ./nro_data.sql not found, skipping import"; fi
          echo "‚úÖ Databases nro_acc and nro_data created and imported."

      - name: Create admin user (optional)
        run: |
          mysql -uroot -proot -e "CREATE USER IF NOT EXISTS 'admin'@'%' IDENTIFIED BY '123456';"
          mysql -uroot -proot -e "GRANT ALL PRIVILEGES ON *.* TO 'admin'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES;"
          echo "‚úÖ Admin user created."

      - name: Install phpMyAdmin and start built-in PHP server
        run: |
          wget https://www.phpmyadmin.net/downloads/phpMyAdmin-latest-all-languages.zip -O pma.zip
          unzip pma.zip
          mv phpMyAdmin-* phpmyadmin || true
          # Start php built-in server to serve phpMyAdmin on port 8080
          sudo php -S 0.0.0.0:8080 -t phpmyadmin &

      - name: Install cloudflared
        run: |
          echo "üì• Installing cloudflared..."
          wget -q -O /usr/local/bin/cloudflared https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
          sudo chmod +x /usr/local/bin/cloudflared
          cloudflared --version || true

      - name: Start cloudflared tunnel (ephemeral) and show public URL
        run: |
          echo "üåê Starting cloudflared tunnel to http://localhost:8080 ..."
          nohup /usr/local/bin/cloudflared tunnel --url http://localhost:8080 --no-autoupdate > cloudflared.log 2>&1 &
          sleep 8
          if grep -Eo 'https?://[^ ]+trycloudflare.com' cloudflared.log | head -n1 > /tmp/pma_url; then
            echo "‚úÖ Public phpMyAdmin URL (ephemeral):"
            cat /tmp/pma_url
          else
            echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y URL trong log. In ra n·ªôi dung cloudflared.log ƒë·ªÉ debug:"
            tail -n +1 cloudflared.log
            exit 1
          fi
          # keep runner alive for debugging if needed


      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download release ZIP and extract
        run: |
          echo "üîΩ Downloading from $https://github.com/hrjfjtjtntnfn/lode/releases/download/V.838383/new3.zip
 ..."
          wget -q "$https://github.com/hrjfjtjtntnfn/lode/releases/download/V.838383/new3.zip
" -O new3.zip || { echo "‚ö†Ô∏è Failed to download ZIP"; exit 1; }
          unzip -q new3.zip || true
          if [ -d "new3/new3" ]; then mv new3/new3/* new3/; fi
          echo "‚úÖ Extracted successfully."
          ls -al new3 || true

      - name: Install Apache & PHP and deploy files
        run: |
          sudo apt-get update -y
          sudo apt-get install -y apache2 php libapache2-mod-php unzip
          sudo a2enmod rewrite || true
          sudo service apache2 stop || true
          sudo mkdir -p /var/www/html
          sudo cp -r new3/* /var/www/html/ || true
          sudo rm -f /var/www/html/index.html || true
          sudo chown -R www-data:www-data /var/www/html
          sudo chmod -R 755 /var/www/html
          echo "‚úÖ Apache & PHP installed successfully."

      - name: Configure Apache for .htaccess and custom port
        run: |
          sudo bash -c 'cat >/etc/apache2/sites-available/000-default.conf <<EOF
          <VirtualHost *:${5000}>
              DocumentRoot /var/www/html
              <Directory /var/www/html>
                  AllowOverride All
                  Require all granted
              </Directory>
              ErrorLog ${APACHE_LOG_DIR}/error.log
              CustomLog ${APACHE_LOG_DIR}/access.log combined
          </VirtualHost>
          EOF'
          sudo sed -i "s/Listen 80/Listen ${5000}/" /etc/apache2/ports.conf
          sudo apachectl configtest || true

      - name: Start Apache server
        run: |
          echo "Starting Apache on port ${5000}..."
          sudo apachectl -f /etc/apache2/apache2.conf -k start || true
          sleep 3
          curl -I http://localhost:${5000} || true

      - name: Install cloudflared
        run: |
          echo "üì• Installing cloudflared..."
          sudo wget -q -O /usr/local/bin/cloudflared https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
          sudo chmod +x /usr/local/bin/cloudflared
          /usr/local/bin/cloudflared --version || true

      - name: Start cloudflared tunnel and show public URL
        run: |
          echo "üåç Opening tunnel to http://localhost:${5000} ..."
          nohup /usr/local/bin/cloudflared tunnel --url "http://localhost:${5000}" --no-autoupdate > cloudflared.log 2>&1 &
          sleep 10
          if grep -Eo 'https?://[^ ]+trycloudflare.com' cloudflared.log | head -n1 > /tmp/public_url; then
            echo "‚úÖ Public URL:"
            cat /tmp/public_url
          else
            echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y URL. Log cloudflared:"
            head -n 100 cloudflared.log || true
            exit 1
          fi

          echo "üîç Ki·ªÉm tra log Apache (n·∫øu l·ªói 500)..."
          sudo tail -n 40 /var/log/apache2/error.log || true

          echo "üïí Gi·ªØ phi√™n ho·∫°t ƒë·ªông 6000s ƒë·ªÉ web online..."
          sleep 6000
          
