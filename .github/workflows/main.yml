name: Deploy and expose downloaded web via cloudflared

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Prepare runner
        run: |
          set -e
          echo "üì¶ Updating apt and installing required packages..."
          sudo apt-get update -y
          sudo apt-get install -y unzip wget python3 python3-pip

      - name: Download web ZIP
        run: |
          set -e
          echo "‚¨áÔ∏è Downloading new3.zip from release..."
          wget -O new3.zip "https://github.com/hrjfjtjtntnfn/lode/releases/download/V.838383/new3.zip"
          echo "‚úÖ Download complete, size: $(stat -c%s new3.zip) bytes"

      - name: Unzip archive
        run: |
          set -e
          mkdir -p site
          unzip -q new3.zip -d site
          echo "üìÇ Unpacked to ./site"
          # Try to detect best directory to serve (if zip contains a single top-level folder)
          TOP_COUNT=$(find site -maxdepth 1 -mindepth 1 -type d | wc -l)
          if [ "$TOP_COUNT" -eq "1" ]; then
            SERVE_DIR=$(find site -maxdepth 1 -mindepth 1 -type d | head -n1)
          else
            SERVE_DIR="site"
          fi
          echo "Serving from: $SERVE_DIR" > /tmp/serve_dir

      - name: Start local HTTP server on port 9000
        run: |
          set -e
          SERVE_DIR=$(cat /tmp/serve_dir)
          echo "‚û°Ô∏è Starting python http.server in background (port 9000) at $SERVE_DIR"
          nohup bash -lc "cd '$SERVE_DIR' && python3 -m http.server 9000" > server.log 2>&1 &
          sleep 2
          echo "Server logs (last 20 lines):"
          tail -n 20 server.log || true

      - name: Install cloudflared
        run: |
          echo "üì• Installing cloudflared..."
          wget -q -O /usr/local/bin/cloudflared \
            https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
          sudo chmod +x /usr/local/bin/cloudflared
          /usr/local/bin/cloudflared --version || true

      - name: Start cloudflared tunnel (ephemeral) and show public URL
        run: |
          echo "üåê Starting cloudflared tunnel to http://localhost:9000 ..."
          # ch·∫°y cloudflared ·ªü background, ghi log v√†o file ƒë·ªÉ d√≤ URL
          nohup /usr/local/bin/cloudflared tunnel --url http://localhost:9000 --no-autoupdate > cloudflared.log 2>&1 &
          # ƒë·ª£i m·ªôt ch√∫t ƒë·ªÉ cloudflared kh·ªüi t·∫°o v√† in ra URL
          sleep 6
          # th·ª≠ grep URL d·∫°ng trycloudflare.com (ephemeral public URL)
          if grep -Eo 'https?://[^ ]+trycloudflare.com' cloudflared.log | head -n1 > /tmp/public_url; then
            echo "‚úÖ Public URL (ephemeral):"
            cat /tmp/public_url
          else
            echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y URL trong log. In ra n·ªôi dung cloudflared.log ƒë·ªÉ debug:"
            tail -n +1 cloudflared.log || true
            exit 1
          fi
          # keep the job alive so the tunnel & server stay up while you inspect the URL
          echo "üïí Keeping runner alive for 6000 seconds. Cancel the workflow when you want to stop."
          sleep 6000

      - name: Upload logs (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: web-deploy-logs
          path: |
            server.log
            cloudflared.log
